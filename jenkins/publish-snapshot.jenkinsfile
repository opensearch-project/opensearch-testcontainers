pipeline {
    options {
        timeout(time: 30, unit: 'MINUTES')
        throttleJobProperty(
            categories: [],
            limitOneJobWithMatchingParams: false,
            maxConcurrentPerNode: 0,
            maxConcurrentTotal: 1,
            paramsToUseForLimit: '',
            throttleEnabled: true,
            throttleOption: 'project',
        )
    }
    agent {
        docker {
            label 'Jenkins-Agent-AL2-X64-C54xlarge-Docker-Host'
            image 'opensearchstaging/ci-runner:ci-runner-centos7-opensearch-build-v2'
            args '-e JAVA_HOME=/opt/java/openjdk-11'
            alwaysPull true
        }
    }
    parameters {
        string(
            name: 'GIT_REFERENCE',
            description: 'Git branch, tag, commitid for reference to checkout commit of OpenSearch core before running the gradle check.',
            defaultValue: 'main',
            trim: true
        )
    }
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'ref', value: '$.ref'],
            ],
            tokenCredentialId: 'jenkins-opensearch-testcontainers-generic-webhook-token',
            causeString: 'A commit was pushed on opensearch-project/testcontainers-opensearch repository main branch causing this workflow to run',
            printContributedVariables: false,
            printPostContent: false,
            regexpFilterText: '$ref',
            regexpFilterExpression: '^(release)/[0-9]+$'
        )
    }
    environment {
        REPO_URL="https://github.com/opensearch-project/testcontainers"
        USER_BUILD_CAUSE = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
        TIMER_BUILD_CAUSE = currentBuild.getBuildCauses('hudson.triggers.TimerTrigger$TimerTriggerCause')
    }
    stages {
        stage('Publish to Sonatype Snapshots Repo') {
            steps {
                script {
                    def ref_final = "${GIT_REFERENCE}"
                    def ref_url = "${REPO_URL}/commit/${GIT_REFERENCE}"
                    if (env.USER_BUILD_CAUSE.equals('[]') && env.TIMER_BUILD_CAUSE.equals('[]')) {
                        ref_final = ${ref}
                        ref_url = "${REPO_URL}/releases/tag/${ref}"
                        println("Triggered by GitHub: ${ref_url}")

                        currentBuild.description = """GitHub: <a href="${ref_url}">${ref_url}</a>"""
                    }
                    else {
                        println("Triggered by User/Timer: ${ref_url}")
                        currentBuild.description = """User/Timer: <a href="${ref_url}">${ref_url}</a>"""
                    }

                    echo("Git checkout ${REPO_URL} on ${ref_final} for testcontainers release")
                    checkout scm
                    sh("git checkout ${ref_final}")

                    // https://docs.gradle.org/current/samples/sample_publishing_credentials.html
                    // https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties
                    withCredentials([usernamePassword(credentialsId: 'jenkins-sonatype-creds', usernameVariable: 'ORG_GRADLE_PROJECT_snapshotRepoUsername', passwordVariable: 'ORG_GRADLE_PROJECT_snapshotRepoPassword')]) {
                        sh './gradlew --no-daemon publishPublishMavenPublicationToSnapshotRepoRepository'
                    }
                }
            }
            post {
                always {
                    cleanWs disableDeferredWipeout: true, deleteDirs: true
                }
            }
        }
    }
}
